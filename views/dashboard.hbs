<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Пример графиков</title>
  <!-- Подключаем Chart.js (онлайн) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <style>
    /* Пример простых стилей для контейнеров */
    .chart-container {
      width: 50%;
      margin: 20px auto;
    }
    canvas {
      background: #f8f9fa; /* Светлый фон для наглядности */
      border: 1px solid #dcdcdc;
      border-radius: 4px;
    }
  </style>
</head>
<body>

  <h2 style="text-align:center;">Успеваемость по дисциплинам</h2>

  <!-- График 1: Уровень работы на уроке -->
  <div class="chart-container">
    <h4>Уровень работы на уроке</h4>
    <canvas id="chartWork"></canvas>
  </div>

  <!-- График 2: Освоение материала -->
  <div class="chart-container">
    <h4>Освоение материала</h4>
    <canvas id="chartMaterial"></canvas>
  </div>

  <!-- График 3: Самоподготовка -->
  <div class="chart-container">
    <h4>Самоподготовка</h4>
    <canvas id="chartSelfPrep"></canvas>
  </div>

  <!-- График 4: Динамика успеваемости -->
  <div class="chart-container">
    <h4>Динамика успеваемости</h4>
    <canvas id="chartProgress"></canvas>
  </div>

  <script>
    /**
     * Пример статических данных.
     * В реальном коде данные (counts) лучше формировать динамически (например, из JSON или из БД).
     */

    // 1) Уровень работы на уроке
    // Например, считаем количество учеников в каждой категории.
    const workLabels = ["Вовлечен", "Вовлечен (нарушение)", "Не вовлечен", "Не вовлечен (нарушение)"];
    const workCounts = [12, 5, 8, 3]; // примерные цифры

    // 2) Освоение материала
    const materialLabels = ["Низкое", "Среднее", "Высокое"];
    const materialCounts = [4, 10, 7];

    // 3) Самоподготовка
    const selfPrepLabels = ["В полном объёме", "Частично", "Не выполняет"];
    const selfPrepCounts = [9, 5, 7];

    // 4) Динамика успеваемости
    const progressLabels = ["Положительная", "Нет изменений", "Отрицательная"];
    const progressCounts = [6, 10, 5];

    // Функция для быстрой генерации цветов столбцов
    // (чтобы каждый столбик/сегмент имел свой цвет)
    function generateColors(count) {
      const colors = [
        '#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8',
        '#6c757d', '#6610f2', '#e83e8c', '#fd7e14'
      ];
      // Возвращаем первые "count" цветов
      return colors.slice(0, count);
    }

    // Инициализация 1-го графика (Bar chart)
    const ctxWork = document.getElementById('chartWork').getContext('2d');
    new Chart(ctxWork, {
      type: 'bar',
      data: {
        labels: workLabels,
        datasets: [{
          label: 'Количество учеников',
          data: workCounts,
          backgroundColor: generateColors(workLabels.length)
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true },
          title: { display: false }
        },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });

    // Инициализация 2-го графика (Bar chart)
    const ctxMaterial = document.getElementById('chartMaterial').getContext('2d');
    new Chart(ctxMaterial, {
      type: 'bar',
      data: {
        labels: materialLabels,
        datasets: [{
          label: 'Количество учеников',
          data: materialCounts,
          backgroundColor: generateColors(materialLabels.length)
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true },
          title: { display: false }
        },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });

    // Инициализация 3-го графика
    const ctxSelfPrep = document.getElementById('chartSelfPrep').getContext('2d');
    new Chart(ctxSelfPrep, {
      type: 'bar',
      data: {
        labels: selfPrepLabels,
        datasets: [{
          label: 'Количество учеников',
          data: selfPrepCounts,
          backgroundColor: generateColors(selfPrepLabels.length)
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true },
          title: { display: false }
        },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });

    // Инициализация 4-го графика
    const ctxProgress = document.getElementById('chartProgress').getContext('2d');
    new Chart(ctxProgress, {
      type: 'bar',
      data: {
        labels: progressLabels,
        datasets: [{
          label: 'Количество учеников',
          data: progressCounts,
          backgroundColor: generateColors(progressLabels.length)
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true },
          title: { display: false }
        },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  </script>

</body>
</html>
